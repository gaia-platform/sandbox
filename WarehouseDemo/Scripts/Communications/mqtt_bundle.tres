(function () { function r(e, n, t) { function o(i, f) { if (!n[i]) { if (!e[i]) { var c = "function" == typeof require && require; if (!f && c) return c(i, !0); if (u) return u(i, !0); var a = new Error("Cannot find module '" + i + "'"); throw a.code = "MODULE_NOT_FOUND", a } var p = n[i] = { exports: {} }; e[i][0].call(p.exports, function (r) { var n = e[i][1][r]; return o(n || r) }, p, p.exports, r, e, n, t) } return n[i].exports } for (var u = "function" == typeof require && require, i = 0; i < t.length; i++)o(t[i]); return o } return r })()({
   1: [function (require, module, exports) {
      // AWS cognito connection info
      var awsConfiguration = {
         poolId: 'us-west-2:167b474a-b678-4271-8f1e-77f84aa530f7', // 'YourCognitoIdentityPoolId'
         host: 'a31gq30tvzx17m-ats.iot.us-west-2.amazonaws.com', // 'YourAwsIoTEndpoint', e.g. 'prefix.iot.us-east-1.amazonaws.com'
         region: 'us-west-2' // 'YourAwsRegion', e.g. 'us-east-1'
      };
      module.exports = awsConfiguration;

   }, {}], 2: [function (require, module, exports) {
      // Imports
      var AWS = require('aws-sdk');
      var AWSIoTData = require('aws-iot-device-sdk');
      var AWSConfiguration = require('./aws-configuration.js');

      console.log('Loaded AWS SDK for JavaScript and AWS IoT SDK for Node.js');


      //// Variables
      /// MQTT
      var currentlySubscribedTopic = 'robot_location';

      /// Browser
      var clientId = 'mqtt-explorer-' + (Math.floor((Math.random() * 100000) + 1)); // Unique ID for connecting to AWS

      /// State
      window.robot_location = 0

      //// Setup AWS and MQTT
      AWS.config.region = AWSConfiguration.region;

      AWS.config.credentials = new AWS.CognitoIdentityCredentials({
         IdentityPoolId: AWSConfiguration.poolId
      });

      /// Config and connect MQTT
      const mqttClient = AWSIoTData.device({
         region: AWS.config.region,
         host: AWSConfiguration.host,
         clientId: clientId,
         protocol: 'wss',
         maximumReconnectTimeMs: 8000,
         debug: true,
         accessKeyId: '',
         secretKey: '',
         sessionToken: ''
      });

      /// Cognito authentication
      var cognitoIdentity = new AWS.CognitoIdentity();
      AWS.config.credentials.get(function (err, data) {
         if (!err) {
            console.log('retrieved identity: ' + AWS.config.credentials.identityId);
            var params = {
               IdentityId: AWS.config.credentials.identityId
            };
            cognitoIdentity.getCredentialsForIdentity(params, function (err, data) {
               if (!err) {
                  mqttClient.updateWebSocketCredentials(data.Credentials.AccessKeyId,
                     data.Credentials.SecretKey,
                     data.Credentials.SessionToken);
               } else {
                  console.log('error retrieving credentials: ' + err);
                  alert('error retrieving credentials: ' + err);
               }
            });
         } else {
            console.log('error retrieving identity:' + err);
            alert('error retrieving identity: ' + err);
         }
      });


      //// MQTT functions
      function mqttClientConnectHandler() { // Connection handler
         console.log('connect');

         //
         // Subscribe to our current topic.
         //
         mqttClient.subscribe(currentlySubscribedTopic);
      }

      function mqttClientReconnectHandler() { // Reconnection handler
         console.log("reconnect");
      }

      function mqttClientMessageHandler(topic, payload) { // Message handler
         console.log('message: ' + topic + ':' + payload.toString());
         robot_location = parseInt(payload.toString())
      }

      function updateSubscriptionTopic() { // Topic subscription handler
         var subscribeTopic = 'subscribe-topic'
         mqttClient.unsubscribe(currentlySubscribedTopic);
         currentlySubscribedTopic = subscribeTopic;
         mqttClient.subscribe(currentlySubscribedTopic);

      }

      function publishData() { // Topic publish handler
         var publishText = ""; //document.getElementById('publish-data').value;
         var publishTopic = "public-topic"; //document.getElementById('publish-topic').value;

         mqttClient.publish(publishTopic, publishText);

      }

      // Install handlers
      mqttClient.on('connect', mqttClientConnectHandler);
      mqttClient.on('reconnect', mqttClientReconnectHandler);
      mqttClient.on('message', mqttClientMessageHandler);

   }, { "./aws-configuration.js": 1, "aws-iot-device-sdk": "aws-iot-device-sdk", "aws-sdk": "aws-sdk" }]
}, {}, [2]);
