/////////////////////////////////////////////
// Copyright (c) Gaia Platform LLC
// All rights reserved.
/////////////////////////////////////////////

#include <atomic>
#include <algorithm>
#include <iostream>

#include "gaia/logger.hpp"
#include "gaia_coordinator.h"
#include "json.hpp"
#include "enums.hpp"

using json = nlohmann::json;
using namespace std;
using namespace gaia::coordinator;
using namespace enums;

string get_uuid();
void publish_message(const string &topic, const string &payload);

//const uint64_t c_session_timeout = 1200;
const uint64_t c_session_timeout = 1200000;

void manage_gaia_container(const string &action,
                           const string &session_id,
                           const string &agent_id)
{
    gaia_log::app().info("Sending {} for agent_id {}",
                         action, agent_id);

    return; // do nothing for now
    json j;
    j["action"] = action;
    j["session_id"] = session_id;
    j["agent_id"] = agent_id;
    publish_message("manage_gaia_container", j.dump());    
}

void send_message(const string &id,
                  const string &project_name,
                  const string &action,
                  const string &payload)
{
    gaia_log::app().info("Sending {} action for project {} with id {}",
                         project_name, action, id);

    publish_message(id + '/' + project_name + '/' + action, payload);
}

ruleset coordinator_ruleset
{
    OnInsert(activity)
    {
        gaia_log::app().info("{} action: {}", activity.type, activity.action);
    }

    OnInsert(activity)
    {
        if (activity.type == activity_type::e_activity_type::browser)
        {
            session.last_session_timestamp = activity.timestamp;
            if (session.is_active &&
                session.last_agent_timestamp + c_session_timeout < activity.timestamp)
            {
                gaia_log::app().info("Session {} is active but agent is MIA.", session.session_id);
                session.is_active = false;
                manage_gaia_container("stop", session.session_id, session.agent_id);
            }
            if (!session.is_active)
            {
                session.is_active = true;
                session.agent_id = get_uuid().c_str();
                session.last_agent_timestamp = activity.timestamp;
                manage_gaia_container("start", session.session_id, session.agent_id);
            }
        }
    }

    OnInsert(activity)
    {
        if (activity.type == activity_type::e_activity_type::agent
            && activity.action == action::e_action::connected)
        {
            if (string(activity.payload) != session.agent_id)
            {
                manage_gaia_container("stop", session.session_id, activity.payload);
            }
            else if (!session.is_active ||
                session.last_session_timestamp + c_session_timeout < activity.timestamp)
            {
                session.is_active = false;
                manage_gaia_container("stop", session.session_id, session.agent_id);
            }
            else
            {
                session.last_agent_timestamp = activity.timestamp;
            }
        }
    }

    OnInsert(activity)
    {
        if (activity.type == activity_type::e_activity_type::project
            && activity.action == action::e_action::select)
        {
            auto activity_row = activity_t::get(activity.gaia_id());
            if (activity_row.project())
            {
                auto session_row = session_t::get(activity_row.session().gaia_id());
                activity_row.project().session_list().insert(session_row);
                send_message(session.agent_id, project.name, "ddl", project.ddl_file);
                send_message(session.agent_id, project.name, "ruleset", project.ruleset_file);
            }
            else
            {
                send_message(session.agent_id, activity.payload, "get", "files");
            }
        }
    }

    OnInsert(activity)
    {
        if (activity.type == activity_type::e_activity_type::project
            && activity.action == action::e_action::exit)
        {
            send_message(session.session_id, "editor", "ddl", "no ddl file loaded");
            send_message(session.session_id, "editor", "output", "no output yet");
            send_message(session.session_id, "editor", "ruleset", "no ruleset file loaded");
        }
    }
}
