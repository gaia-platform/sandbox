/////////////////////////////////////////////
// Copyright (c) Gaia Platform LLC
// All rights reserved.
/////////////////////////////////////////////

#include <atomic>
#include <algorithm>
#include <iostream>

#include "gaia/logger.hpp"
#include "gaia_coordinator.h"
#include "json.hpp"

using json = nlohmann::json;
using namespace std;
using namespace gaia::coordinator;

string get_uuid();
void publish_message(const string &topic, const string &payload);

const uint64_t c_session_timeout = 7200;
// const uint64_t c_session_timeout = 1200000; // for testing

void dump_db();

void start_gaia_container(const string &session_id,
                          const string &agent_id)
{
    gaia_log::app().info("Sending start for agent_id {}", agent_id);

    json j;
    j["session_id"] = session_id;
    j["agent_id"] = agent_id;
    publish_message("manage_gaia_container", j.dump());    
}

void send_message(const string &id,
                  const string &project_name,
                  const string &action,
                  const string &payload)
{
    gaia_log::app().info("Sending {} action for project {} with id {}",
                         project_name, action, id);

    publish_message(id + '/' + project_name + '/' + action, payload);
}

void stop_gaia_container(const string &agent_id)
{
    gaia_log::app().info("Sending stop for agent_id {}", agent_id);

    send_message(agent_id, "agent", "exit", "exit");  
}

ruleset coordinator_ruleset
{
    on_insert(browser_activity)
    {
        gaia_log::app().info("New browser activity.");

        session.last_session_timestamp = browser_activity.timestamp;
        if (session.is_active &&
            session.last_agent_timestamp + c_session_timeout < browser_activity.timestamp)
        {
            gaia_log::app().info("Session {} is active but agent is MIA.", session.session_id);
            session.is_active = false;
            stop_gaia_container(session.agent_id);
        }
        if (!session.is_active)
        {
            session.is_active = true;
            session.agent_id = get_uuid().c_str();
            session.last_agent_timestamp = browser_activity.timestamp;
            start_gaia_container(session.session_id, session.agent_id);
        }
    }

    on_insert(agent_activity)
    {
        if (strcmp(agent_activity.agent_id, session.agent_id) != 0)
        {
            stop_gaia_container(agent_activity.agent_id);
        }
        else if (!session.is_active ||
            session.last_session_timestamp + c_session_timeout < agent_activity.timestamp)
        {
            session.is_active = false;
            stop_gaia_container(session.agent_id);
        }
        else
        {
            session.last_agent_timestamp = agent_activity.timestamp;
            if (strcmp(agent_activity.action, "connected") == 0 &&
                strcmp(session.current_project_name, "none") != 0)
            {
                send_message(session.session_id, "project", "selected", session.current_project_name);
            }
        }
    }

    on_insert(project_activity)
    {
        if (strcmp(project_activity.action, "exit") == 0)
        {
            session.current_project_name = "none";
        }
    }

    on_insert(project_activity)
    {
        if (strcmp(project_activity.action, "select") != 0)
        {
            return;
        }

        session.current_project_name = project_activity.name;

        for (session->P:project)
        {
            if (strcmp(P.name, project_activity.name) == 0)
            {
                gaia_log::app().info("Found existing project {}.", project_activity.name);
                send_message(session.session_id, "project", "selected", project_activity.name);

                dump_db();
                return;
            }
        }

        gaia_log::app().info("No existing project {} found. Creating new one.", project_activity.name);

        project_writer w;
        w.name = project_activity.name;
        auto project_ = project_t::get(w.insert_row());
        session.projects.connect(project_);

        send_message(session.session_id, "project", "selected", project_activity.name);

        dump_db();
    }

    on_insert(project_activity)
    {
        if (strcmp(project_activity.action, "build") == 0)
        {
            send_message(session.agent_id, project_activity.name, "build", "normal");
        }
    }

    on_insert(editor_file_request)
    {
        gaia_log::app().info("Editor file request activity");

        for (session->P:project)
        {
            if (strcmp(P.name, session.current_project_name) == 0)
            {
                for (P->PF:project_file)
                {
                    if (strcmp(PF.name, editor_file_request.name) == 0)
                    {
                        send_message(session.session_id, "editor", PF.name, PF.content);
                        return;
                    }
                }

                gaia_log::app().info("No file '{}' found, requesting from agent.", editor_file_request.name);
                send_message(session.session_id, "editor", editor_file_request.name, "Retrieving file...");
                send_message(session.agent_id, P.name,"get", editor_file_request.name);
                send_message(session.session_id, "editor", "output", "Restoring session, this may take a few minutes...");
                return;
            }
        }
    }

    on_insert(editor_content)
    {
        gaia_log::app().info("Editor activity");

        for (session->P:project)
        {
            if (strcmp(P.name, session.current_project_name) == 0)
            {
                for (P->PF:project_file)
                {
                    if (strcmp(PF.name, editor_content->project_file.name) == 0)
                    {
                        gaia_log::app().info("Existing file '{}' found.", editor_content->project_file.name);
                        PF.content = editor_content->project_file.content;
                        send_message(session.agent_id, P.name, editor_content->project_file.name,
                            editor_content->project_file.content);

                        dump_db();
                        return;
                    }
                }

                gaia_log::app().info("No existing file '{}' found. Storing new one.", editor_content->project_file.name);
                P.project_file.connect(editor_content->project_file);                
                send_message(session.agent_id, P.name, editor_content->project_file.name,
                    editor_content->project_file.content);

                dump_db();
                return;
            }
        }
    }
}
