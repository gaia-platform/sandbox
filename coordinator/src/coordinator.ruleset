/////////////////////////////////////////////
// Copyright (c) Gaia Platform LLC
// All rights reserved.
/////////////////////////////////////////////

#include <atomic>
#include <algorithm>
#include <iostream>

#include "gaia/logger.hpp"
#include "json.hpp"

using json = nlohmann::json;
using namespace std;

string get_uuid();
void publish_message(const string &topic, const string &payload);

const uint64_t c_session_timeout = 12000;

void manage_gaia_container(const string &action,
                           const string &session_id,
                           const string &agent_id)
{
    gaia_log::app().info("Sending {} for session {} with agent_id {}",
                         action, session_id, agent_id);

    return; // do nothing for now
    json j;
    j["action"] = action;
    j["session_id"] = session_id;
    j["agent_id"] = agent_id;
    publish_message("manage_gaia_container", j.dump());    
}

ruleset coordinator_ruleset
{
    {
        if (string(@activity.activity_type) == "browser")
        {
            gaia_log::app().info("Session refresh");

            session.last_session_timestamp = activity.timestamp;
            if (session.is_active &&
                session.last_agent_timestamp + c_session_timeout < activity.timestamp)
            {
                gaia_log::app().info("Session {} is active but agent is MIA.", session.id);
                session.is_active = false;
                manage_gaia_container("stop", session.id, session.agent_id);
            }
            if (!session.is_active)
            {
                session.is_active = true;
                session.agent_id = get_uuid().c_str();
                session.last_agent_timestamp = activity.timestamp;
                manage_gaia_container("start", session.id, session.agent_id);
            }
        }
    }

    {
        if (string(@activity.activity_type) == "agent")
        {
            gaia_log::app().info("Agent alive");

            if (string(activity.id) != session.agent_id)
            {
                manage_gaia_container("stop", session.id, activity.id);
            }
            else if (!session.is_active ||
                session.last_agent_timestamp + c_session_timeout < activity.timestamp)
            {
                session.is_active = false;
                manage_gaia_container("stop", session.id, session.agent_id);
            }
            else
            {
                session.last_agent_timestamp = activity.timestamp;
            }
        }
    }

/*
    OnUpdate(activity)
    {
        gaia_log::app().info("OnUpdate activity");
        if (activity.activity_type == e_activity_type::session_refresh)
        {
            gaia_log::app().info("do something activity");
        }
    }

    OnUpdate(session)
    {
        gaia_log::app().info("OnUpdate session");
        if (session.is_active)
        {
            gaia_log::app().info("do something session");
        }
    }
*/

    /*
    // Rule 1:  keep the temperature with the range of the minimum and
    // maximum limits of the coordinator.
    OnUpdate(sensor.value, coordinator.max_temp, coordinator.min_temp)
    {
        if (!coordinator.is_on)
        {
            return;
        }

        if (sensor.value >= coordinator.max_temp)
        {
            actuator.value = min(c_fan_speed_limit, actuator.value + c_fan_speed_increment);
            actuator.timestamp = g_timestamp;
        }
        else if (sensor.value <= coordinator.min_temp)
        {
            actuator.value = max(0.0f, actuator.value - (2*c_fan_speed_increment));
            actuator.timestamp   = g_timestamp;
        }
    }

    // Rule 2:  Turn off all the fans if the coordinator is powered down.
    {
        if (!@coordinator.is_on)
        {
            actuator.value = 0;
            actuator.timestamp = g_timestamp;
        }
    }

    // Rule 3:  If the fan is at 70% of its limit and the temperature is still too hot then
    // set the fan to its maximum speed.
    OnUpdate(actuator.value)
    {
        if (actuator.value == c_fan_speed_limit)
        {
            return;
        }

        if (actuator.value > c_fan_threshold * c_fan_speed_limit && sensor.value > coordinator.max_temp)
        {
            actuator.value = c_fan_speed_limit;
        }
    }
    */
}
