/////////////////////////////////////////////
// Copyright (c) Gaia Platform LLC
// All rights reserved.
/////////////////////////////////////////////

#include <atomic>
#include <algorithm>

using namespace std;

extern atomic<int> g_timestamp;

ruleset coordinator_ruleset
{
    /*
    // Rule 1:  keep the temperature with the range of the minimum and
    // maximum limits of the coordinator.
    OnUpdate(sensor.value, coordinator.max_temp, coordinator.min_temp)
    {
        if (!coordinator.is_on)
        {
            return;
        }

        if (sensor.value >= coordinator.max_temp)
        {
            actuator.value = min(c_fan_speed_limit, actuator.value + c_fan_speed_increment);
            actuator.timestamp = g_timestamp;
        }
        else if (sensor.value <= coordinator.min_temp)
        {
            actuator.value = max(0.0f, actuator.value - (2*c_fan_speed_increment));
            actuator.timestamp   = g_timestamp;
        }
    }

    // Rule 2:  Turn off all the fans if the coordinator is powered down.
    {
        if (!@coordinator.is_on)
        {
            actuator.value = 0;
            actuator.timestamp = g_timestamp;
        }
    }

    // Rule 3:  If the fan is at 70% of its limit and the temperature is still too hot then
    // set the fan to its maximum speed.
    OnUpdate(actuator.value)
    {
        if (actuator.value == c_fan_speed_limit)
        {
            return;
        }

        if (actuator.value > c_fan_threshold * c_fan_speed_limit && sensor.value > coordinator.max_temp)
        {
            actuator.value = c_fan_speed_limit;
        }
    }
    */
}
